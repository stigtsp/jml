[macro datas $A][funcs data-$A][/macro]
[macro dataid $dataid][after data- $dataid][/macro]
[macro match $regexp $data][match-do identity $regexp $data][/macro]
[macro ignore][/macro]
[macro identity @all]@all[/macro]
[macro -- @comment][/macro]
[macro have $f][not [empty [fbody $f]]][/macro]

[-- math]
[macro min $a $b][if [> $a $b] $b $a][/macro]
[macro max $a $b][if [< $a $b] $b $a][/macro]

[macro fac $n][* [iota 1 $n]][/macro]

[macro and @all][* [map is @all]][/macro]
[macro or @all][> [+ [map is @all]]][/macro]
[macro xor $a $b][= [is $a] [is $b]][/macro]
[macro not $first][if [is $first] 0 1][/macro]

[-- list]
[macro reduce $fun $a $b @text][[if [empty @text] rest reduce] $fun [[if [empty $b] first $fun] $a $b] @text][/macro]

[-- strings]
[macro first $first]$first[/macro]
[macro second $first $second]$second[/macro]
[macro third $first $second $third]$third[/macro]
[macro rest $first @rest]@rest[/macro]
[macro dup @all]@all @all[/macro]
[macro xml $tag @xml][before </$tag> [after > [after <$tag @xml]]][/macro]

[macro gt $a $b][< [cmp $a $b] 0][/macro]
[macro gte $a $b][<= [cmp $a $b] 0][/macro]
[macro lt $a $b][> [cmp $a $b] 0][/macro]
[macro lte $a $b][>= [cmp $a $b] 0][/macro]
[macro big $a $b][if [lt $a $b] $b $a][/macro]
[macro small $a $b][if [gt $a $b] $b $a][/macro]
[macro biggest @all][reduce big @all][/macro]
[macro smallest @all][reduce small @all][/macro]

[macro replace $fun $what @txt][@txt][/macro][-- TODO: this is of course not working...]

[-- basic html --]
[macro param $id @data][decode [before & [after &$id= &@data&]]][/macro]
[macro link $url @txt]<a href="$url">[[if [empty @txt] first rest] $url @txt]</a>[/macro]
[macro bold @txt]<i>@txt</i>[/macro]
[macro b @txt]<b>@txt</b>[/macro]
[macro i @txt]<i>@txt</i>[/macro]
[macro li @txt]<li>@txt</li>[/macro]
[macro italic @txt]<i>@txt</i>[/macro]
[macro h1 @txt]<h1>@txt</h1>[/macro]
[macro h2 @txt]<h2>@txt</h2>[/macro]
[macro h3 @txt]<h3>@txt</h3>[/macro]
[macro h4 @txt]<h4>@txt</h4>[/macro]
[macro dt @txt]<dt>[b @txt]</dt>[/macro]
[macro dd @txt]<dd>@txt</dd>[/macro]

[-- html forms --]
[macro form $action @txt]<form action="$action">@txt</form>[/macro]
[macro input $field @txt]<label><b>$field:</b> <input name='$field' value="@txt"/> </label>[/macro]
[macro hidden $field @txt]<input type='hidden' name='$field' value="@txt"/>[/macro]
[macro submit $field]<input type='submit' name='submit' value="$field"/>[/macro]
[macro textarea $field @txt]<label><b>$field:</b><br/> <textarea id='$field' cols=20 rows=5 name='$field' resize='none' style='white-space: pre;overflow: hidden;'>@txt</textarea> </label><script>(function(){var e = document.getElementById('$field'); e.onfocus = e.onkeyup=function() {  var sh = this.scrollHeight, sw = this.scrollWidth;  this.style.height = sh < 50 ? "50px" : sh+"px";  this.style.width = sw < 50 ? "50px" : sw+"px";};})();</script>[/macro]

[-- highlevel html --]
[macro header @title]<html><head><title>@title</title></head><h1><a href='/'>/</a> @title</h1>[/macro]
[macro sys-header @title][header @title][/about][/macro]
[macro footer]</body></html>[/macro]

[-- system info --]
[macro /about]JML Unikernel, (C) 2016 Jonas S Karlsson, [link [dup https://github.com/yesco/jml]]<hr>\n[/macro]
[macro help]<dl>\n[dt Math   :][dd inc dec - / % > < >= <= = != + * (iota FROM TO STEP)]\n[dt String :][dd empty equal cmp lower upper after before concat (split USING TEXT) (split-do FUN USING TEXT)]\n[dt Regexp: ][dd (match REGEXP TEXT) (match-do FUN REGEXP TEXT) # ^ab(c*).(x.*)y\$]\n[dt X/HTML :][dd (xml NAME TEXT) decode encrypt encrypt-eval decrypt decrypt-eval]\n[dt List   :][dd length nth (map FUN ...) (filter PRED ...) (filter-do PRED FUN ...)]\n[dt System :][dd time (datas PREFIX) (data ID TEXT) (data-ID) funcs fargs fbody]\n[dt Funcs  :][dd [funcs]]\n</dt>[/macro]
[macro /favicon.ico][-- make it shut up!][/macro]

[-- basic system html app --]
[macro isweb $fun][after / $fun][/macro]
[macro webfuncs][map isweb [funcs]][/macro]
[macro fargs-dollar @txt]<br/>[[if [empty [after \$ @txt]] ignore input] [after \$ @txt]][/macro]
[macro fargs-at @txt]<br/>[[if [empty [after \@ @txt]] ignore textarea] [after \@ @txt]][/macro]
[macro fargs-input @txt][fargs-at @txt][fargs-dollar @txt][/macro]
[macro f-li-input $fun @txt][li <form method='get' action='/$fun'> /$fun [fargs /$fun] [map fargs-input [fargs /$fun]] [submit $fun] </form>][/macro]

[-- The FAIL macro get called when function doesn't exist --]
[macro FAIL $id @params]<font color=red>%%(FAIL:$id @params)%%</font>[/macro]

[macro /][sys-header Index]<ul>[map f-li-input [webfuncs]][footer]</u>[/macro]
[macro /help][sys-header Help][help][footer][/macro]
[macro /get $id][data-$id][/macro]
[macro /put $id @txt][data $id @txt][/macro]

[-- wiki app --]
[macro wiki-markup @txt][subst-do wiki-link {(.*)} [subst-do i /(.*)/ [subst-do b _(.*)_ [wiki-markup-headers @txt]]]][/macro]
[macro wiki-markup-headers @txt][subst-do h1 =(.*)= [subst-do h2 ==(.*)== [subst-do h3 ===(.*)=== [subst-do h4 ====(.*)==== @txt]]]][/macro]
[macro wiki-data $id][[if [have data-wiki-$id] data-wiki-$id wiki-nodata] $id][/macro]
[macro wiki-nodata $id]<font color=red>_This wiki page don't exist yet!_</font>===Wikis:===[wiki-list][/macro]
[macro wiki-link $id][link wiki/$id $id][/macro]
[macro wiki-datalink $dataid][li [wiki-link [after wiki- [dataid $dataid]]]][/macro]
[macro wiki-list $id]<ul>[map wiki-datalink [datas wiki]]</ul>[/macro]

[macro /wiki $id][sys-header Wiki - $id][wiki-markup [wiki-data $id]]<hr>[link /edit/$id (edit)][footer][/macro]
[macro /edit $id][sys-header Edit Wiki - $id][form /save [hidden id $id][submit save]<br>[textarea text [wiki-data $id]]][footer][/macro]
[macro /save $id @text][sys-header Save Wiki - $id]<h2>previous</h2>[data-wiki-$id]<h2>saved</h2>[data wiki-$id @text]<hr noshade><b>Hopefully saved...[link /wiki/$id (view it)]</b>[/macro]

[macro f-li-nk $fun @txt][li [link /$fun $fun @txt]][/macro]
[macro /list][sys-header List Data][map f-li-nk [datas]][footer][/macro]

[-- demo --]
[macro /input]Your name: [form /name <input name=’name’ type=isindex>][/macro]
[macro /name @name]Hello @name![/macro]

[-- routing --]
[macro route-add $id $time $url @data][data data-route-$id $id $time $url @data][/macro]

[macro route-local $hash][first [biggest [funcs data-route- data-route-$hash]] [biggest [funcs data-route-]]][/macro]
[macro route-data $hash][[route-local $hash]][/macro]
[macro route-url $route][first [route-data $route]][/macro]

[macro /route-add $id $time $url @data][route-add $id $time $url @data][/macro]

[macro route-data-pp $id]{route-add [split data-route- $id] [$id]}[/macro]
[macro /route-list][map route-data-pp [datas route-]][/macro]

[-- -- using last 16 hexchars of encrypted content as "hash" this is 64 bits only]
[macro content-hash @content][substr -17 -16 [encrypt/ContentAddress @content]][/macro]

[macro route-to-self? $route][equal data-route-[/jml-id] $route][/macro]
[macro route-resolve $HASH][route-resolve-verify $HASH [route-local $HASH] route-resolve-remote][/macro]

[macro route-resolve-verify $HASH $ROUTE $ACTION][[if [route-to-self? $ROUTE] rest $ACTION] $HASH $ROUTE][/macro]

[macro route-resolve-remote $HASH $ROUTE][eval/ignore/add-route/route-resolve [wget [route-url $ROUTE]/route-resolve/$HASH]][/macro]
[macro route-forward $HASH $ROUTE]{route-resolve-verify $HASH {ignore [/route-list]}}[/macro]
[macro /route-resolve $HASH][route-resolve $HASH [route-id $HASH] route-forward][/macro]

[-- <<< end of standard lib --]

[macro quote @txt]{@txt}[/macro]

[-- user updates -- ]

[macro data-wiki-main]This is the main[/macro]
[macro data-wiki-fish]I don't like fish![/macro]
[macro data-wiki-]==Welcome to the MagniOS wiki!\n==This wiki is rather small, with meager features.\nHowever, it's free and easy to change!\n\nIt's built in a simple text-substitution language called {JML} running a simple cloud operating system.\n[/macro]

